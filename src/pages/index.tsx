import React, { FormEvent, useState } from 'react';
import Head from 'next/head';
import {
  Center,
  Input,
  Heading,
  Button,
  Stack,
  FormControl,
  FormLabel,
  Link,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  useToast
} from '@chakra-ui/react';

import { FaGoogle } from "react-icons/fa";
import { useRouter } from 'next/router';
import { useAuth } from '@/context/AuthContext';
import { signInWithPopup } from 'firebase/auth';
import { auth, db, provider } from '@/config/firebase';
import { collection, doc, setDoc } from 'firebase/firestore';


export default function Login() {
  const { login, resetPassword } = useAuth();
  const router = useRouter();
  const toast = useToast();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const isOnline = collection(db, 'isOnline');

  const handleLogin = async (event: FormEvent<EventTarget>) => {
    event.preventDefault();
    try {
      await login(email, password);

      if (auth.currentUser != null) {
        setDoc(doc(isOnline, auth?.currentUser.uid), {
          isOnline: true,
        });
        console.log('user signed in');
        toast({
          title: 'Welcome',
          description: 'You have successfully signed in',
          status: 'success',
          duration: 2000,
          isClosable: true,
        });
      }

      router.push('./home');
    } catch (error: any) {
      console.log(error, 'could not sign user in');
      router.push('./');
      toast({
        title: 'Error',
        description: 'Could not sign you in',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const handleGoogleSignIp = async () => {
    try {
      await signInWithPopup(auth, provider);

      if (auth.currentUser != null) {
        setDoc(doc(isOnline, auth?.currentUser.uid), {
          isOnline: true,
        });
        console.log('user signed in with google');
        toast({
          title: 'Welcome',
          description: 'You have successfully signed in',
          status: 'success',
          duration: 3000,
          isClosable: true,
        });
      }

      router.push('./home');
    } catch (error: any) {
      console.log(error, 'could not sign user in with google');
      router.push('./');
      toast({
        title: 'Sorry',
        description: 'Could not sign you in with google because the popup was closed',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
  };

  const recoverPassword = () => {
    try {
      resetPassword(email);

      toast({
        title: 'Email sent!',
        description: 'Check your email for a link to reset your password',
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
    } catch (error: any) {
      console.log(error, 'could not send email verification link');
      toast({
        title: 'Error',
        description: 'Could not send email verification link',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
  };

  return (
    <>
      <Head>
        <title>Chat App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <Center h={'100vh'}>
          <form onSubmit={handleLogin}>
            <Stack spacing={4} width={'lg'}>
              <Heading size='3xl'>Sign in</Heading>
              <Link href='./signup' className='text-xs'>{`Don't have an account? Sign up`}</Link>
              <FormControl id='email'>
                <FormLabel>Email address</FormLabel>
                <Input type='email' placeholder='example@email.com' value={email} onChange={(e) => setEmail(e.target.value)} />
              </FormControl>
              <FormControl id='password'>
                <FormLabel>Password</FormLabel>
                <Input type='password' placeholder='password' value={password} onChange={(e) => setPassword(e.target.value)} />
              </FormControl>
              <Button alignSelf='end' variant='link' className='text-xs' onClick={onOpen}>Forgot password?</Button>
              <Modal isOpen={isOpen} onClose={onClose}>
                <ModalOverlay />
                <ModalContent>
                  <ModalHeader>
                    Forgot Password?
                  </ModalHeader>
                  <ModalCloseButton />
                  <ModalBody>
                    <FormControl id='email'>
                      <FormLabel>Email address</FormLabel>
                      <Input type='email' placeholder='example@email.com' value={email} onChange={(e) => setEmail(e.target.value)} />
                    </FormControl>
                  </ModalBody>
                  <ModalFooter>
                    <Button mr={3} onClick={onClose}>Cancel</Button>
                    <Button colorScheme='blue' onClick={() => { recoverPassword(); }}>Recover Password</Button>
                  </ModalFooter>
                </ModalContent>
              </Modal>

              <Button type='submit' colorScheme={'blue'} size='lg'>
                Sign in
              </Button>
              <Button colorScheme={'red'} size='lg' leftIcon={<FaGoogle />} onClick={() => { handleGoogleSignIp(); }}>
                Sign in with Google
              </Button>
            </Stack>
          </form>
        </Center>
      </main>
    </>
  );
}
