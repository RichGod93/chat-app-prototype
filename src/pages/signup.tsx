import React, { FormEvent, useState } from 'react';
import Head from 'next/head';
import {
    Center,
    Input,
    Heading,
    Button,
    Stack,
    FormControl,
    FormLabel,
    Link,
    useToast,
} from '@chakra-ui/react';

import { FaGoogle } from "react-icons/fa";
import { useRouter } from 'next/router';

import { signInWithPopup, updateProfile } from 'firebase/auth';
import { auth, db, provider } from '@/config/firebase';
import { useAuth } from '@/context/AuthContext';
import { collection, doc, setDoc } from 'firebase/firestore';


export default function Signup() {
    const { signUp } = useAuth();
    const router = useRouter();
    const toast = useToast();
    const [username, setUsername] = useState("");
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const isOnline = collection(db, 'isOnline');

    const handleSignup = (event: FormEvent<EventTarget>) => {
        event.preventDefault();
        try {
            signUp(email, password);

            if (auth.currentUser != null) {
                updateProfile(auth.currentUser, {
                    displayName: username
                }).then(() => {
                    console.log('displayName updated!');
                }).catch((error: any) => {
                    console.log(error, 'could not update displayName');
                });

                setDoc(doc(isOnline, auth?.currentUser.uid), {
                    isOnline: true,
                });

                console.log('user signed up!');
                toast({
                    title: 'Welcome',
                    description: 'You have successfully created an account!',
                    status: 'success',
                    duration: 2000,
                    isClosable: true,
                });
            } else {
                console.log('could not update displayName');
            }

            router.push('./home');
        } catch (error: any) {
            console.log(error, 'could not sign user up');
            router.push('./signup');
            toast({
                title: 'Error',
                description: 'Could not sign you up',
                status: 'error',
                duration: 3000,
                isClosable: true,
            });
        }
    };

    const handleGoogleSignUp = async () => {
        try {
            await signInWithPopup(auth, provider);

            if (auth.currentUser != null) {
                setDoc(doc(isOnline, auth?.currentUser.uid), {
                    isOnline: true,
                });
                console.log('user signed up with google!');
                toast({
                    title: 'Welcome',
                    description: 'You have successfully created an account!',
                    status: 'success',
                    duration: 2000,
                    isClosable: true,
                });
            }

            router.push('./home');
        } catch (error: any) {
            console.log(error, 'could not sign user up with google');
            router.push('./signup');
            toast({
                title: 'Error',
                description: 'Could not sign you up with google',
                status: 'error',
                duration: 3000,
                isClosable: true,
            });
        }
    };

    return (
        <>
            <Head>
                <title>Chat App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="">
                <Center h={'100vh'}>
                    <form onSubmit={handleSignup}>
                        <Stack spacing={4} width={'lg'}>
                            <Heading size='3xl'>Sign up</Heading>
                            <Link href='./' className='text-xs'>{`Already have an account? Login`}</Link>
                            <FormControl id='displayName'>
                                <FormLabel>Username</FormLabel>
                                <Input type='text' placeholder='joseph1234' value={username} onChange={(e) => setUsername(e.target.value)} />
                            </FormControl>
                            <FormControl id='email'>
                                <FormLabel>Email address</FormLabel>
                                <Input type='email' placeholder='example@email.com' value={email} onChange={(e) => setEmail(e.target.value)} />
                            </FormControl>
                            <FormControl id='password'>
                                <FormLabel>Password</FormLabel>
                                <Input type='password' placeholder='password' value={password} onChange={(e) => setPassword(e.target.value)} />
                            </FormControl>
                            <Button type='submit' colorScheme={'blue'} size='lg'>
                                Sign in
                            </Button>
                            <Button colorScheme={'red'} size='lg' leftIcon={<FaGoogle />} onClick={() => { handleGoogleSignUp(); }}>
                                Sign up with Google
                            </Button>
                        </Stack>
                    </form>
                </Center>
            </main>
        </>
    );
}
